/*
                List<BodyDeclaration> members = type.getMembers();


                for (BodyDeclaration member : members) {

                    if (member instanceof MethodDeclaration) {

                        MethodDeclaration method = (MethodDeclaration) member;  //get the method
                        NodeList<Statement> stmsts = method.getBody().get().getStatements();  //get all statements

                        System.out.println(stmsts.size());

                        for (int i = 0; i < stmsts.size(); i++) {   // iterate all the statements


                            Statement currentStmt = stmsts.get(i);
                            //System.out.println("index="+i+"=="+currentStmt);


                            if (currentStmt instanceof ReturnStmt) {   // show error in return statement

                                ReturnStmt rs = (ReturnStmt) currentStmt;
                                Expression ex = rs.getExpression().get();

                                if (ex instanceof UnaryExpr && ((UnaryExpr) ex).getOperator().toString().equals("POSTFIX_INCREMENT")) {

                                    System.out.print("Error found at File: " + f.getName());
                                    System.out.print(", position: " + rs.getBegin().get().toString());
                                    System.out.print(", statement: " + rs.toString());
                                    System.out.println(", Desc: This statement has a return such as return x++;. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing\n");
                                }
                            } else if (currentStmt instanceof IfStmt) {


                                IfStmt binop = (IfStmt) currentStmt;
                                Expression exp = binop.getCondition();


                                System.out.println("inisde.....");


                                if (exp instanceof BinaryExpr) {
                                    // System.out.println( ((BinaryExpr) exp).getLeft());
                                    // System.out.println( ((BinaryExpr) exp).getRight());
                                    // System.out.println( ((BinaryExpr) exp).getOperator());


                                    if (((BinaryExpr) exp).getLeft().isStringLiteralExpr() || ((BinaryExpr) exp).getRight().isStringLiteralExpr()) {


                                        System.out.print("Error found at File: " + f.getName());
                                        System.out.print(", position: " + binop.getBegin().get().toString());
                                        System.out.print(", statement: " + exp.toString());
                                        System.out.println(", desc: " + "Illegal String Comparison");

                                    } else if (((BinaryExpr) exp).getLeft().isNameExpr()) {

                                        String left = ((BinaryExpr) exp).getLeft().toString();

                                        if (identifiers.get(left) != null && identifiers.get(left).equals("java.lang.String")) {


                                            System.out.print("Error found at File: " + f.getName());
                                            System.out.print(", position: " + binop.getBegin().get().toString());
                                            System.out.print(", statement: " + exp.toString());
                                            System.out.println(", desc: " + "Illegal String Comparison");
                                        }

                                    } else if (((BinaryExpr) exp).getRight().isNameExpr()) {

                                        String right = ((BinaryExpr) exp).getLeft().toString();
                                        if (identifiers.get(right) != null && identifiers.get(right).equals("java.lang.String")) {
                                            System.out.print("Error found at File: " + f.getName());
                                            System.out.print(", position: " + binop.getBegin().get().toString());
                                            System.out.print(", statement: " + exp.toString());
                                            System.out.println(", desc: " + "Illegal String Comparison");
                                        }
                                    } else {


                                    }


                                }

                            } else if (currentStmt instanceof TryStmt) {

                                NodeList<Statement> stmsts1 = ((TryStmt) currentStmt).getTryBlock().getStatements();
                                stmsts.addAll(stmsts1);

                                ((TryStmt) currentStmt).getCatchClauses().forEach(catchClause -> {
                                    stmsts.addAll(catchClause.getBody().getStatements());
                                });

                                try {


                                    stmsts1 = ((TryStmt) currentStmt).getFinallyBlock().get().getStatements();
                                    stmsts.addAll(stmsts1);


                                    // now handle finally blocks

                                    NodeList<Statement> fbstmts = ((TryStmt) currentStmt).getFinallyBlock().get().getStatements();

                                    fbstmts.forEach(statement -> {

                                                if (statement instanceof ThrowStmt) {
                                                    System.out.print("Error found at File: " + f.getName());
                                                    System.out.print(", position: " + statement.getBegin().get().toString());
                                                    System.out.print(", statement: " + statement.toString());
                                                    System.out.println(", desc: " + "Finally block contains a throw statement");
                                                }
                                            }
                                    );

                                } catch (Exception e) {

                                }
                            } else {


                                List<Node> listnode = currentStmt.getChildNodes();

                                for (int k = 0; k < listnode.size(); k++) {

                                    Node node = listnode.get(k);

                                    if (node instanceof com.github.javaparser.ast.stmt.ForStmt) {
                                        try {
                                            stmsts.add((Statement) node);
                                            //  System.out.println("adding nodes" + stmsts.size());

                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }


                                }


                            }

                        }
                    }

                }

   */